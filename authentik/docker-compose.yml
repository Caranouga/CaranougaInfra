services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    networks:
      - authentik
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - authentik-database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - stack.env
      
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    networks:
      - authentik
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - authentik-redis:/data
      
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.8.1}
    restart: unless-stopped
    command: server
    networks:
      - frontend
      - authentik
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - authentik-media:/media
      - authentik-templates:/templates
    env_file:
      - stack.env
    labels:
      - traefik.enable=true
      - traefik.http.routers.ak-https.tls=true
      - traefik.http.routers.ak-https.tls.certresolver=cloudflare
      - traefik.http.routers.ak-https.entrypoints=websecure
      - traefik.http.routers.ak-https.rule=Host(`ak.caradev.fr`)
      - traefik.http.services.ak-https.loadbalancer.server.port=9000
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
        
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.8.1}
    restart: unless-stopped
    command: worker
    networks:
      - authentik
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - authentik-media:/media
      - authentik-certs:/certs
      - authentik-templates:/templates
    env_file:
      - stack.env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy

networks:
  frontend:
    external: true
  authentik:
    external: true

volumes:
  authentik-database:
    driver: local
  authentik-redis:
    driver: local
  authentik-media:
    driver: local
  authentik-certs:
    driver: local
  authentik-templates:
    driver: local
